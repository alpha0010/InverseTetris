// Generated by CoffeeScript 1.4.0
(function() {
  var SettingsMgr,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  SettingsMgr = (function() {

    SettingsMgr.prototype.selectIdx = -1;

    SettingsMgr.prototype.dc = null;

    SettingsMgr.prototype.game = null;

    SettingsMgr.prototype.rectBounds = null;

    function SettingsMgr() {
      this.onEvtMouseClick = __bind(this.onEvtMouseClick, this);

      this.onEvtMouseMove = __bind(this.onEvtMouseMove, this);

      var canvas, drawingContext, mouseClickHandler, mouseMoveHandler,
        _this = this;
      canvas = document.getElementById("gameBoard");
      canvas.width = 200;
      canvas.height = 100;
      drawingContext = canvas.getContext("2d");
      drawingContext.font = "24px Arial";
      drawingContext.fillStyle = "white";
      drawingContext.fillText("Normal", 8, 26);
      drawingContext.fillText("Abnormal", 8, 58);
      drawingContext.fillText("TetrChess", 8, 90);
      this.dc = drawingContext;
      this.drawSelection();
      this.rectBounds = canvas.getBoundingClientRect();
      mouseMoveHandler = function(e) {
        return _this.onEvtMouseMove(e);
      };
      mouseClickHandler = function(e) {
        _this.onEvtMouseClick(e);
        if (_this.selectIdx !== -1) {
          canvas.removeEventListener("mousemove", mouseMoveHandler);
          return canvas.removeEventListener("mouseup", mouseClickHandler);
        }
      };
      canvas.addEventListener("mousemove", mouseMoveHandler);
      canvas.addEventListener("mouseup", mouseClickHandler);
    }

    SettingsMgr.prototype.drawSelection = function() {
      var highlight, regular;
      regular = "white";
      highlight = "red";
      this.dc.strokeStyle = this.selectIdx === 0 ? highlight : regular;
      this.dc.strokeRect(4, 4, 120, 26);
      this.dc.strokeStyle = this.selectIdx === 1 ? highlight : regular;
      this.dc.strokeRect(4, 36, 120, 26);
      this.dc.strokeStyle = this.selectIdx === 2 ? highlight : regular;
      return this.dc.strokeRect(4, 68, 120, 26);
    };

    SettingsMgr.prototype.onEvtMouseMove = function(evt) {
      var idx, xPos, yPos;
      xPos = evt.clientX - this.rectBounds.left;
      yPos = evt.clientY - this.rectBounds.top;
      idx = -1;
      if (xPos > 4 && xPos < 124) {
        if (yPos > 4 && yPos < 30) {
          idx = 0;
        } else if (yPos > 36 && yPos < 62) {
          idx = 1;
        } else if (yPos > 68 && yPos < 94) {
          idx = 2;
        }
      }
      if (this.selectIdx !== idx) {
        this.selectIdx = idx;
        this.drawSelection();
      }
    };

    SettingsMgr.prototype.onEvtMouseClick = function(evt) {
      if (this.selectIdx !== -1) {
        this.game = new InverseTetris(new TetrisAI(this.selectIdx));
      }
    };

    return SettingsMgr;

  })();

  window.SettingsMgr = SettingsMgr;

}).call(this);
